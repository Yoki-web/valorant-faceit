// This is your Prisma schema file
// Docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // üî• –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
  rating        Int       @default(1000) // —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥
  wins          Int       @default(0)    // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥
  losses        Int       @default(0)    // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä–∞–∂–µ–Ω–∏–π
  bio           String?                // –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
